{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.3.34343",
      "templateHash": "15415743282393997092"
    }
  },
  "definitions": {
    "_1.ServiceNameType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "nameUnique": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/naming.module.bicep"
        }
      }
    },
    "NamingOutput": {
      "type": "object",
      "properties": {
        "analysisServicesServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "apiManagement": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appConfiguration": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appServiceEnvironment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appServicePlan": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "appService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationInsights": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "applicationSecurityGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationCredential": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationRunbook": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationSchedule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "automationVariable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "availabilitySet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "bastionHost": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchApplication": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "batchPool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelDirectline": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelEmail": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelMsTeams": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelSlack": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botChannelsRegistration": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "botWebApp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cdnEndpoint": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cdnProfile": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "chaosExperiment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "chaosTarget": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cognitiveAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerApps": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerAppsEnvironment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerRegistry": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "containerRegistryWebhook": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "cosmosdbAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "customProvider": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dashboard": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactory": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetMysql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetPostgresql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryDatasetSqlServerTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryIntegrationRuntimeManaged": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceDataLakeStorageGen2": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceKeyVault": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceMysql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServicePostgresql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryLinkedServiceSqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryPipeline": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataFactoryTriggerSchedule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeAnalyticsAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeAnalyticsFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeStore": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dataLakeStoreFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databaseMigrationProject": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databaseMigrationService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "databricksWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestLab": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestLinuxVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "devTestWindowsVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "diskEncryptionSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "dnsZone": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridDomain": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridDomainTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridEventSubscription": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventGridTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubConsumerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespaceAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "eventHubNamespaceDisasterRecoveryConfig": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "expressRouteCircuit": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "expressRouteGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "firewall": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "firewallPolicy": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "frontDoor": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "frontDoorFirewallPolicy": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "functionApp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "grafana": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightHadoopCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightHbaseCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightInteractiveQueryCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightKafkaCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightMlServicesCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightRserverCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightSparkCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "hdInsightStormCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "image": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotCentralApplication": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubConsumerGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubDps": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "iotHubDpsCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVault": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultCertificate": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultKey": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "keyVaultSecret": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kubernetesCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "kustoEventHubDataConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadBalancer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadBalancerNatRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "loadTesting": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "linuxVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "linuxVirtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "localNetworkGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "logAnalyticsWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "machineLearningWorkspace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "managedDisk": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "managedIdentity": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mapsAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mariadbVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlElasticpool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mssqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "mysqlVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkInterface": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityGroupRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkSecurityRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "networkWatcher": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHubAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "notificationHubNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "pointToSiteVpnGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlDatabase": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "postgresqlVirtualNetworkRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "powerbiEmbedded": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "privateDnsZone": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "publicIp": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "publicIpPrefix": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "redisCache": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "redisFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "relayHybridConnection": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "relayNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "resourceGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "roleAssignment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "roleDefinition": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "route": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "routeTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceFabricCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceFabricManagedCluster": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusNamespace": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusNamespaceAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusQueueAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusSubscription": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusSubscriptionRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "serviceBusTopicAuthorizationRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sharedImage": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sharedImageGallery": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "signalrService": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "snapshots": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlElasticpool": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlFailoverGroup": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlFirewallRule": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "sqlServer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageAccount": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageContainer": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageDataLakeGen2Filesystem": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageShare": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageShareDirectory": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "storageTable": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsFunctionJavascriptUdf": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsJob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputEventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputMssql": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputServiceBusQueue": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsOutputServiceBusTopic": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsReferenceInputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputBlob": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputEventHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "streamAnalyticsStreamInputIotHub": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "subnet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "templateDeployment": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "trafficManagerProfile": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetwork": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetworkGateway": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualNetworkPeering": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "virtualWan": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "windowsVirtualMachine": {
          "$ref": "#/definitions/_1.ServiceNameType"
        },
        "windowsVirtualMachineScaleSet": {
          "$ref": "#/definitions/_1.ServiceNameType"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/naming.module.bicep"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string"
    },
    "applicationName": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "defaultTags": "[union(createObject('applicationName', parameters('applicationName'), 'environment', parameters('environment')), parameters('tags'))]"
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]"
    },
    "naming": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "NamingDeployment",
      "resourceGroup": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": [
              "[parameters('applicationName')]",
              "[parameters('environment')]",
              "**location**"
            ]
          },
          "uniqueLength": {
            "value": 6
          },
          "uniqueSeed": {
            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.3.34343",
              "templateHash": "18039693105299386105"
            },
            "name": "Azure Naming module",
            "description": "This module help maintaining a consistent naming.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "ServiceNameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nameUnique": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "NamingOutput": {
              "type": "object",
              "properties": {
                "analysisServicesServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "apiManagement": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appConfiguration": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appServiceEnvironment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appServicePlan": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationInsights": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationSecurityGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationCredential": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationRunbook": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationSchedule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationVariable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "availabilitySet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "bastionHost": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchApplication": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchPool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelDirectline": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelEmail": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelMsTeams": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelSlack": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelsRegistration": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botWebApp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cdnEndpoint": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cdnProfile": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "chaosExperiment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "chaosTarget": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerApps": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerAppsEnvironment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerRegistry": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerRegistryWebhook": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cosmosdbAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "customProvider": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dashboard": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactory": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetMysql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetPostgresql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetSqlServerTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryIntegrationRuntimeManaged": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceDataLakeStorageGen2": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceKeyVault": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceMysql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServicePostgresql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceSqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryPipeline": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryTriggerSchedule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeAnalyticsAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeAnalyticsFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeStore": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeStoreFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databaseMigrationProject": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databaseMigrationService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databricksWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestLab": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestLinuxVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestWindowsVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "diskEncryptionSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dnsZone": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridDomain": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridDomainTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridEventSubscription": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubConsumerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespaceDisasterRecoveryConfig": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "expressRouteCircuit": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "expressRouteGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "firewall": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "firewallPolicy": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "frontDoor": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "frontDoorFirewallPolicy": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "functionApp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "grafana": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightHadoopCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightHbaseCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightInteractiveQueryCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightKafkaCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightMlServicesCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightRserverCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightSparkCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightStormCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "image": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotCentralApplication": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubConsumerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubDps": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubDpsCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVault": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultKey": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultSecret": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kubernetesCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoEventHubDataConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadBalancer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadBalancerNatRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadTesting": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "linuxVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "linuxVirtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "localNetworkGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "logAnalyticsWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "machineLearningWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "managedDisk": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "managedIdentity": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mapsAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlElasticpool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkInterface": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityGroupRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkWatcher": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHubAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHubNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "pointToSiteVpnGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "powerbiEmbedded": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "privateDnsZone": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "publicIp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "publicIpPrefix": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "redisCache": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "redisFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "relayHybridConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "relayNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "resourceGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "roleAssignment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "roleDefinition": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "route": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "routeTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceFabricCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceFabricManagedCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusQueueAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusSubscription": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusSubscriptionRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusTopicAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sharedImage": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sharedImageGallery": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "signalrService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "snapshots": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlElasticpool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlFailoverGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageContainer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageDataLakeGen2Filesystem": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageShare": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageShareDirectory": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsFunctionJavascriptUdf": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsJob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputEventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputMssql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsReferenceInputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputEventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputIotHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "subnet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "templateDeployment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "trafficManagerProfile": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetwork": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetworkGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetworkPeering": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualWan": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "windowsVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "windowsVirtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "parameters": {
            "prefix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources."
              }
            },
            "suffix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible."
              }
            },
            "uniqueSeed": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]",
              "metadata": {
                "description": "Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id."
              }
            },
            "uniqueLength": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. Max length of the uniqueness suffix to be added -defaults to 4"
              }
            },
            "useDashes": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Use dashes as separator where applicable -defaults to true"
              }
            },
            "useLowerCase": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create names using lowercase letters -defaults to true"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Used when region abbreviation is needed (placeholder value is \"**location**)"
              }
            }
          },
          "variables": {
            "uniquePart": "[substring(uniqueString(parameters('uniqueSeed')), 0, parameters('uniqueLength'))]",
            "delimiter": "[if(parameters('useDashes'), '-', '')]",
            "locationPlaceholder": "**location**",
            "regionAbbreviations": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "brazilus": "brus",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "eastusstg": "eusstg",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "israelcentral": "isc",
              "italynorth": "itn",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "polandcentral": "polc",
              "qatarcentral": "qatc",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            },
            "strPrefixJoined": "[if(empty(parameters('prefix')), '', format('{0}{1}', replace(replace(replace(string(parameters('prefix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter')), variables('delimiter')))]",
            "strPrefixInterim": "[if(parameters('useLowerCase'), toLower(variables('strPrefixJoined')), variables('strPrefixJoined'))]",
            "strPrefix": "[replace(variables('strPrefixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "strSuffixJoined": "[if(empty(parameters('suffix')), '', format('{0}{1}', variables('delimiter'), replace(replace(replace(string(parameters('suffix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter'))))]",
            "strSuffixInterim": "[if(parameters('useLowerCase'), toLower(variables('strSuffixJoined')), variables('strSuffixJoined'))]",
            "strSuffix": "[replace(variables('strSuffixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "placeholder": "[[****]",
            "nameTemplate": "[format('{0}{1}{2}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'))]",
            "nameUniqueTemplate": "[format('{0}{1}{2}{3}{4}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'), variables('delimiter'), variables('uniquePart'))]",
            "nameSafeTemplate": "[toLower(replace(variables('nameTemplate'), variables('delimiter'), ''))]",
            "nameUniqueSafeTemplate": "[toLower(replace(variables('nameUniqueTemplate'), variables('delimiter'), ''))]",
            "d": "[variables('delimiter')]",
            "ph": "[variables('placeholder')]",
            "nt": "[variables('nameTemplate')]",
            "nut": "[variables('nameUniqueTemplate')]",
            "nst": "[variables('nameSafeTemplate')]",
            "nust": "[variables('nameUniqueSafeTemplate')]",
            "names": {
              "analysisServicesServer": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'as'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'as'), 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'apim'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'apim'), 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'appcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'appcg'), 50))]",
                "slug": "appcg"
              },
              "appServiceEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nt'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nt'), variables('ph'), 'ase'), 36))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nut'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nut'), variables('ph'), 'ase'), 36))]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'plan'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'plan'), 40))]",
                "slug": "plan"
              },
              "appService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'app'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'app'), 60))]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'agw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'agw'), 80))]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'appi'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'appi'), 260))]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'asg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'asg'), 80))]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'aa'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'aa'), 50))]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacert'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacert'), 128))]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 128))]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 63))]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aasched'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aasched'), 128))]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aavar'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aavar'), 128))]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'avail'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'avail'), 80))]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'bas'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'bas'), 80))]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'ba'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'ba'), 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'baapp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'baapp'), 64))]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nt'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nt'), variables('ph'), 'bacert'), 45))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nut'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nut'), variables('ph'), 'bacert'), 45))]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'bapool'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'bapool'), 24))]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botline'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botline'), 64))]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botmail'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botmail'), 64))]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botteams'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botteams'), 64))]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botslack'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botslack'), 64))]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botchan'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botchan'), 64))]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botcon'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botcon'), 64))]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'bot'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'bot'), 64))]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'cdn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'cdn'), 50))]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260))]",
                "slug": "cdnprof"
              },
              "chaosExperiment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'chaosexp'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'chaosexp'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'chaosexp'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'chaosexp'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'chaosexp'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'chaosexp'), 128))]",
                "slug": "chaosexp"
              },
              "chaosTarget": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'chaostarget'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'chaostarget'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'chaostarget'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'chaostarget'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'chaostarget'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'chaostarget'), 128))]",
                "slug": "chaostarget"
              },
              "cognitiveAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cog'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cog'), 64))]",
                "slug": "cog"
              },
              "containerApps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nt'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nt'), variables('ph'), 'ca'), 32))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nut'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nut'), variables('ph'), 'ca'), 32))]",
                "slug": "ca"
              },
              "containerAppsEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cae'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cae'), 64))]",
                "slug": "cae"
              },
              "containerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cg'), 63))]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'acr'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'acr'), 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'crwh'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'crwh'), 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cosmos'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cosmos'), 63))]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'prov'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'prov'), 64))]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nt'), variables('ph'), 'dsb'), 160))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nut'), variables('ph'), 'dsb'), 160))]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adf'), 63))]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260))]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260))]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260))]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adfir'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adfir'), 63))]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260))]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260))]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260))]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260))]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260))]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpl'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpl'), 260))]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adftg'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adftg'), 260))]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dla'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dla'), 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlfw'), 50))]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dls'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dls'), 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50))]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nt'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nt'), variables('ph'), 'migr'), 57))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nut'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nut'), variables('ph'), 'migr'), 57))]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nt'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nt'), variables('ph'), 'dms'), 62))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nut'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nut'), variables('ph'), 'dms'), 62))]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nt'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nt'), variables('ph'), 'dbw'), 30))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nut'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nut'), variables('ph'), 'dbw'), 30))]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'lab'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'lab'), 50))]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 64))]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 15))]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'des'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'des'), 80))]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'dns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'dns'), 63))]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egd'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egd'), 50))]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egdt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egdt'), 50))]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'egs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'egs'), 64))]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egt'), 50))]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'evh'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'evh'), 50))]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehar'), 50))]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehcg'), 50))]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehn'), 50))]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehnar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehnar'), 50))]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehdr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehdr'), 50))]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'erc'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'erc'), 80))]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'ergw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'ergw'), 80))]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afw'), 80))]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afwp'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afwp'), 80))]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'fd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'fd'), 64))]",
                "slug": "fd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'fdfw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'fdfw'), 80))]",
                "slug": "fdfw"
              },
              "functionApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'func'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'func'), 60))]",
                "slug": "func"
              },
              "grafana": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'grfn'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'grfn'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'grfn'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'grfn'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'grfn'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'grfn'), 23))]",
                "slug": "grfn"
              },
              "hdInsightHadoopCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hadoop'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hadoop'), 59))]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hbase'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hbase'), 59))]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'iqr'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'iqr'), 59))]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'kafka'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'kafka'), 59))]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'mls'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'mls'), 59))]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'rsv'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'rsv'), 59))]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'spark'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'spark'), 59))]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'storm'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'storm'), 59))]",
                "slug": "storm"
              },
              "image": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'img'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'img'), 80))]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'iotapp'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'iotapp'), 63))]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iot'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iot'), 50))]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iotcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iotcg'), 50))]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dps'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dps'), 64))]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dpscert'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dpscert'), 64))]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'kv'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'kv'), 24))]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvc'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvc'), 127))]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvk'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvk'), 127))]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvs'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvs'), 127))]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aks'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aks'), 63))]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'kc'), 22)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'kc'), 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'kdb'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'kdb'), 260))]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'kehc'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'kehc'), 40))]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lb'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lb'), 80))]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80))]",
                "slug": "lbnatrl"
              },
              "loadTesting": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'lt'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'lt'), 64))]",
                "slug": "lt"
              },
              "linuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 64))]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 64))]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lgw'), 80))]",
                "slug": "lgw"
              },
              "logAnalyticsWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'log'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'log'), 63))]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'mlw'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'mlw'), 260))]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'dsk'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'dsk'), 80))]",
                "slug": "dsk"
              },
              "managedIdentity": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'id'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'id'), 128))]",
                "slug": "id"
              },
              "mapsAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nt'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nt'), variables('ph'), 'map'), 98))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nut'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nut'), variables('ph'), 'map'), 98))]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mariadb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mariadb'), 63))]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariafw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariafw'), 128))]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'maria'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'maria'), 63))]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariavn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariavn'), 128))]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqldb'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqldb'), 128))]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63))]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128))]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysql'), 63))]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128))]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nic'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nic'), 80))]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsg'), 80))]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nw'), 80))]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'nh'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'nh'), 260))]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256))]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpngw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpngw'), 80))]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psqldb'), 63))]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128))]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psql'), 63))]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128))]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pbi'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pbi'), 63))]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pdns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pdns'), 63))]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pip'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pip'), 80))]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pippf'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pippf'), 80))]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'redis'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'redis'), 63))]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'redisfw'), 256)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'redisfw'), 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'rlhc'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'rlhc'), 260))]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'rln'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'rln'), 50))]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nt'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nt'), variables('ph'), 'rg'), 90))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nut'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nut'), variables('ph'), 'rg'), 90))]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ra'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ra'), 64))]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'rd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'rd'), 64))]",
                "slug": "rd"
              },
              "route": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'rt'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'rt'), 80))]",
                "slug": "rt"
              },
              "routeTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'route'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'route'), 80))]",
                "slug": "route"
              },
              "serviceFabricCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sf'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sf'), 23))]",
                "slug": "sf"
              },
              "serviceFabricManagedCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sfmc'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sfmc'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sfmc'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sfmc'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sfmc'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sfmc'), 23))]",
                "slug": "sfmc"
              },
              "serviceBusNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sb'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sb'), 50))]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbar'), 50))]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbq'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbq'), 260))]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbqar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbqar'), 50))]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbs'), 50))]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbsr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbsr'), 50))]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbt'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbt'), 260))]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'si'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'si'), 80))]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'sig'), 80)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'sig'), 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63))]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snap'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snap'), 80))]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63))]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128))]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'st'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'st'), 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nt'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nt'), variables('ph'), 'blob'), 1024))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nut'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nut'), variables('ph'), 'blob'), 1024))]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stct'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stct'), 63))]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stdl'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stdl'), 63))]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stq'), 63))]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stt'), 63))]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asafunc'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asafunc'), 63))]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asa'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asa'), 63))]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63))]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63))]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63))]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63))]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63))]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asarblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asarblob'), 63))]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63))]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaieh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaieh'), 63))]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63))]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snet'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snet'), 80))]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'deploy'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'deploy'), 64))]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'traf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'traf'), 63))]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vnet'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vnet'), 64))]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vgw'), 80))]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpeer'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpeer'), 80))]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vwan'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vwan'), 80))]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              }
            }
          },
          "resources": {},
          "outputs": {
            "names": {
              "$ref": "#/definitions/NamingOutput",
              "value": "[variables('names')]"
            },
            "regionAbbreviations": {
              "type": "object",
              "value": "[variables('regionAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "main": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "MainDeployment",
      "resourceGroup": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "naming": {
            "value": "[reference('naming').outputs.names.value]"
          },
          "tags": {
            "value": "[variables('defaultTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.3.34343",
              "templateHash": "13727304641835906668"
            }
          },
          "definitions": {
            "_1.ServiceNameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nameUnique": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "modules/naming.module.bicep"
                }
              }
            },
            "NamingOutput": {
              "type": "object",
              "properties": {
                "analysisServicesServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "apiManagement": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appConfiguration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServiceEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServicePlan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationInsights": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCredential": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationRunbook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationVariable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "availabilitySet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "bastionHost": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchPool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelDirectline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelEmail": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelMsTeams": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelSlack": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelsRegistration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botWebApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnEndpoint": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosExperiment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosTarget": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerApps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerAppsEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistry": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistryWebhook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cosmosdbAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "customProvider": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dashboard": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetPostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetSqlServerTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryIntegrationRuntimeManaged": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceDataLakeStorageGen2": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceKeyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServicePostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceSqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryPipeline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryTriggerSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStore": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStoreFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationProject": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databricksWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLab": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLinuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestWindowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "diskEncryptionSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomain": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomainTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridEventSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceDisasterRecoveryConfig": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteCircuit": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewall": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoor": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoorFirewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "functionApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "grafana": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHadoopCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHbaseCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightInteractiveQueryCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightKafkaCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightMlServicesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightRserverCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightSparkCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightStormCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "image": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotCentralApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDpsCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultKey": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultSecret": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kubernetesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoEventHubDataConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancerNatRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadTesting": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "localNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "logAnalyticsWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "machineLearningWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedDisk": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedIdentity": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mapsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkInterface": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroupRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkWatcher": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "pointToSiteVpnGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "powerbiEmbedded": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "privateDnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIpPrefix": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisCache": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayHybridConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "resourceGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleAssignment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleDefinition": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "route": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "routeTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricManagedCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueueAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscriptionRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopicAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImage": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImageGallery": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "signalrService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "snapshots": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFailoverGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageContainer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageDataLakeGen2Filesystem": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShare": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShareDirectory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsFunctionJavascriptUdf": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsJob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputMssql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsReferenceInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputIotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "subnet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "templateDeployment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "trafficManagerProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetwork": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkPeering": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualWan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "modules/naming.module.bicep"
                }
              }
            }
          },
          "parameters": {
            "naming": {
              "$ref": "#/definitions/NamingOutput"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "resourceNames": {
              "appServicePlan": "[parameters('naming').appServicePlan.name]",
              "appService": "[parameters('naming').appService.nameUnique]",
              "storageAccount": "[parameters('naming').storageAccount.nameUnique]"
            }
          },
          "resources": {
            "appServicePlan": {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-12-01",
              "name": "[variables('resourceNames').appServicePlan]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "F1",
                "capacity": 1
              }
            },
            "webApplication": {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2018-11-01",
              "name": "[variables('resourceNames').appService]",
              "location": "[parameters('location')]",
              "tags": "[union(createObject(format('hidden-related:{0}/providers/Microsoft.Web/serverfarms/{1}', resourceGroup().id, variables('resourceNames').appServicePlan), 'Resource'), parameters('tags'))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('resourceNames').appServicePlan)]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            },
            "storage": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "StorageAccountDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "StorageV2"
                  },
                  "skuName": {
                    "value": "Standard_LRS"
                  },
                  "name": {
                    "value": "[variables('resourceNames').storageAccount]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.3.34343",
                      "templateHash": "14322391716003551036"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "BlobStorage",
                        "BlockBlobStorage",
                        "FileStorage",
                        "Storage",
                        "StorageV2"
                      ]
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_GZRS",
                        "Standard_RAGRS",
                        "Standard_RAGZRS",
                        "Standard_ZRS"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2019-06-01",
                      "name": "[toLower(replace(parameters('name'), '-', ''))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "tags": "[union(parameters('tags'), createObject('displayName', parameters('name')))]",
                      "properties": {
                        "accessTier": "Hot",
                        "supportsHttpsTrafficOnly": true
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[toLower(replace(parameters('name'), '-', ''))]"
                    },
                    "primaryEndpoints": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', ''))), '2019-06-01').primaryEndpoints]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[reference('storage').outputs.name.value]"
            },
            "appServiceName": {
              "type": "string",
              "value": "[variables('resourceNames').appService]"
            },
            "appServicePlanName": {
              "type": "string",
              "value": "[variables('resourceNames').appServicePlan]"
            }
          }
        }
      },
      "dependsOn": [
        "naming",
        "rg"
      ]
    }
  },
  "outputs": {
    "resourceGroupId": {
      "type": "string",
      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]"
    },
    "appServiceName": {
      "type": "string",
      "value": "[reference('main').outputs.appServiceName.value]"
    },
    "appServicePlanName": {
      "type": "string",
      "value": "[reference('main').outputs.appServicePlanName.value]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[reference('main').outputs.storageAccountName.value]"
    }
  }
}